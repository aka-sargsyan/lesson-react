{"version":3,"sources":["componet/profile/ProfileStyle.module.css","componet/header/HeaderStyle.module.css","componet/assets/header/logo.png","componet/navbar/NavbarStyle.module.css","componet/header/Header.jsx","componet/navbar/Navbar.jsx","componet/profile/Profile.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styleCss","header","src","logo","alt","width","navBarMenu","id","to","name","Navbar","map","element","key","Profile","app_wraper_content","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,mBAAqB,2C,mBCAvCD,EAAOC,QAAU,CAAC,OAAS,8B,mBCD3BD,EAAOC,QAAU,IAA0B,kC,mBCC3CD,EAAOC,QAAU,CAAC,OAAS,8B,0NCWZC,EARA,WACb,OACE,yBAAKC,UAAWC,IAASC,QACvB,yBAAKC,IAAKC,IAAMC,IAAI,GAAGC,MAAM,S,iBCH7BC,EAAa,CACjB,CAAEC,GAAI,EAAGC,GAAI,UAAWC,KAAM,WAC9B,CAAEF,GAAI,EAAGC,GAAI,UAAWC,KAAM,WAC9B,CAAEF,GAAI,EAAGC,GAAI,OAAQC,KAAM,QAC3B,CAAEF,GAAI,EAAGC,GAAI,QAASC,KAAM,SAC5B,CAAEF,GAAI,EAAGC,GAAI,WAAYC,KAAM,YAC/B,CAAEF,GAAI,EAAGC,GAAI,QAASC,KAAM,UAiBfC,EAdA,WACb,OACE,yBAAKX,UAAWC,IAASU,QACvB,6BACGJ,EAAWK,KAAI,SAACC,GAAD,OACd,yBAAKC,IAAKD,EAAQL,IAChB,kBAAC,IAAD,CAASC,GAAE,WAAMI,EAAQJ,KAAOI,EAAQH,a,iBCLrCK,EAVC,WACd,OACE,yBAAKf,UAAWC,IAASc,SACvB,yBAAKf,UAAWC,IAASe,oBACzB,yCCeSC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BACE,kBAAC,IAAD,CAAOkB,KAAK,WAAWC,UAAWJ,SCH1BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.21e1351f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_wraper_content\":\"ProfileStyle_app_wraper_content__3_vUh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"HeaderStyle_header__1Gr8X\"};","module.exports = __webpack_public_path__ + \"static/media/logo.80c19cf7.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"NavbarStyle_Navbar__1oSGK\"};","import React from 'react';\nimport styleCss from './HeaderStyle.module.css'\nimport logo from '../assets/header/logo.png'\n\nconst Header = () => {\n  return (\n    <div className={styleCss.header}>\n      <img src={logo} alt=\"\" width=\"70\"/>    \n    </div>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport styleCss from './NavbarStyle.module.css'\nimport { NavLink } from 'react-router-dom';\n\nconst navBarMenu = [\n  { id: 1, to: 'profile', name: 'Profile' },\n  { id: 2, to: 'dialogs', name: 'Dialogs' },\n  { id: 3, to: 'news', name: 'News' },\n  { id: 4, to: 'music', name: 'Music' },\n  { id: 5, to: 'settings', name: 'Settings' },\n  { id: 6, to: 'users', name: 'Users' }\n]\n\nconst Navbar = () => {\n  return (\n    <div className={styleCss.Navbar}>\n      <div>\n        {navBarMenu.map((element) => (\n          <div key={element.id}>\n            <NavLink to={`/${element.to}`}>{element.name}</NavLink>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Navbar;\n\n","import React from 'react';\nimport styleCss from './ProfileStyle.module.css'\n\n\nconst Profile = () => {\n  return (\n    <div className={styleCss.Profile}>\n      <div className={styleCss.app_wraper_content}>\n      <p>Profile</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Profile;","import React from 'react';\nimport { BrowserRouter as Router,Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './componet/header/Header';\nimport Navbar from './componet/navbar/Navbar';\nimport Profile from './componet/profile/Profile';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"app-wrapper\">\n          <Header />\n          <Navbar />\n          <div>\n            <Route path='/profile' component={Profile} />\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}